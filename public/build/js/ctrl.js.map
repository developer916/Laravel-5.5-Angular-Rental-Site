{"version":3,"sources":["ActivityController.js","AuthController.js","DashboardController.js","DocumentsController.js","EmailsController.js","FinancesController.js","I18NController.js","InvoicesController.js","ListDocumentsController.js","MessagesController.js","PaymentsController.js","ProfileController.js","SettingsController.js","TenantsController.js","UserProfileController.js","DepositRelaysController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvlxpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ctrl.js","sourcesContent":["'use strict';\n\nRentomatoApp.controller('ActivityController', function($rootScope, $scope, $http) {\n\n});\n","'use strict';\n\nRentomatoApp.controller('AuthController', function ($rootScope, $location, $scope, $cookies, AuthService) {\n\n});\n","'use strict';\n\nRentomatoApp.controller('DashboardController', function ($rootScope, $scope, DashboardService, $cookies) {\n\n  DashboardService.getFirstLogin().then(function (response) {\n    if (response.hasLogin == '0') {\n      var language = $cookies.get('lang').replace('\"', '');\n      $('#first-login-' + language.replace('\"', '')).modal('show');\n      DashboardService.updateFirstLogin();\n    }\n  });\n  DashboardService.getDepositRelay().then(function (response){\n    $scope.depositRelay = response;\n  });\n\n  DashboardService.getWidgetsStats().then(function (response) {\n    $scope.widgets = response;\n  });\n\n  DashboardService.getWidgetMonthlyRent().then(function (response) {\n    $scope.widgetmonthlyrent = response;\n  });\n\n  DashboardService.getWidgetLatest().then(function (response) {\n    $scope.widgetlast = response;\n  });\n\n});\n","'use strict';\n\nRentomatoApp.controller('DocumentsController', [\n    '$rootScope',\n    '$scope',\n    '$http',\n    '$location',\n    'toaster',\n    '$filter',\n    '$stateParams',\n    'DocumentService',\n    'LandlordService',\n    function ($rootScope, $scope, $http, $location, toaster, $filter, $stateParams, DocumentService,LandlordService) {\n        $scope.document = {\n            id: ($stateParams.id) ? $stateParams.id : null,\n            files: []\n        };\n        $scope.files = $scope.document.files;\n        $scope.tenants = [];\n        LandlordService.getTenants().then(function(response){\n            $scope.tenants = response;\n        });\n        if (!$stateParams.id) {\n            DocumentService.createDoc($scope.formData).then(function (response) {\n                response.data.privacy = 'Private';\n                angular.extend($scope.document, response.data);\n            });\n        } else {\n            DocumentService.getDoc($stateParams.id).then(function (response) {\n                response.data.files = [\n                    {\n                        id: response.data.id,\n                        file: response.data.file,\n                        file_size: response.data.file_size\n                    }\n                ]\n                angular.extend($scope.document, response.data);\n            });\n        }\n\n        $scope.$watchCollection('document.files', function (newValue) {\n            if (newValue && newValue.length) {\n                $scope.documentForm.$setPristine();\n            }\n        });\n\n        $scope.updateDoc = function (id) {\n            if (!$scope.document.files.length) {\n                return false;\n            }\n            DocumentService.updateDoc($scope.document).then(function (response) {\n                if (response.status == 1) {\n                    toaster.success($filter('translate')('Document updated.'));\n                    $location.path('/documents');\n                }\n            });\n        }\n\n\n\n    }]);\n","'use strict';\n\nRentomatoApp.controller('EmailsController', function ($rootScope, $scope, $http, $state, toaster, EmailsService, I18NService) {\n  $scope.formData = {};\n\n\n  EmailsService.getEmailEvents().then(function (response) {\n    $scope.formData.events = response;\n  });\n\n  I18NService.getLanguages().then(function (response) {\n    $scope.formData.languages = response;\n  });\n\n  $scope.deleteEmail = function (id) {\n    console.log(id);\n    EmailsService.deleteEmail(id).then(function (response) {\n      console.log(response);\n      $state.go($state.current, {}, {reload: true});\n    });\n  };\n\n  $scope.submitForm = function () {\n    EmailsService.saveEmail($scope.formData).then(function (response) {\n      toaster.success(response.message);\n    });\n  }\n});\n","'use strict';\n\nRentomatoApp.controller('FinancesController', function ($rootScope, $scope, $http) {\n\n});\n","'use strict';\n\nRentomatoApp.controller('I18NController', function ($rootScope, $scope, toaster, I18NService, $filter) {\n\n  $scope.translations = [];\n  $scope.newItemFormData = {};\n  $scope.updateItemsFormData = {};\n  $scope.updateItemsFormData.label = [];\n  $scope.updateItemsFormData.label_key = [];\n\n  $scope.newItem = function () {\n    I18NService.addItem($scope.newItemFormData).then(function (response) {\n      I18NService.getTranslationsByLanguage(2).then(function (response) {\n        $scope.translations = response;\n      });\n    });\n  };\n\n  $scope.updateItem = function (langId,itemIndex,itemId) {\n    I18NService.updateItem($scope.translations[langId][itemIndex],itemId).then(function (response) {\n      toaster.success($filter('translate')('Language Item Updated.'));\n    });\n  };\n\n  $scope.publish = function (language_id) {\n    I18NService.publish(language_id).then(function (response) {\n      if (response.status == 1) {\n        toaster.success($filter('translate')('Language Published - please refresh!'));\n      }\n    });\n  };\n\n  I18NService.getLanguages().then(function (response) {\n    $scope.languages = response;\n  });\n\n  I18NService.getTranslations().then(function (response) {\n    $scope.translations = response;\n  });\n\n  $scope.index = function () {\n    var global = {};\n    I18NService.index().then(function (indexResponse) {\n      global.response = indexResponse;\n      I18NService.getTranslations().then(function (translationsResponse) {\n        $scope.translations = translationsResponse;\n        if (global.response.status == 1 && global.response.msg) {\n          toaster.success(global.response.msg);\n        }\n      });\n    });\n  };\n\n\n});\n","'use strict';\n\nRentomatoApp.controller('InvoicesController', function ($rootScope, $scope, $stateParams, InvoiceService) {\n\n\n  $scope.invoiceId = $stateParams.invoiceId;\n\n  InvoiceService.getInvoice($scope.invoiceId).then(function(response) {\n    $scope.invoice = response;\n  });\n\n});\n","'use strict';\n\nRentomatoApp.controller('ListDocumentsController', [\n    'DocumentService',\n    function (DocumentService) {\n\n    }]);\n","'use strict';\n\nRentomatoApp.controller('MessagesController', function ($rootScope, $scope, $http, $uibModal, $stateParams, MessageService, TagService, UserService, toaster, $filter) {\n    $scope.messages = {};\n    $scope.visibleUsers = []; // TODO remove when recipients done\n    $scope.recipients = [];\n    $scope.tags = {all: [], selected: []};\n    $scope.newTagFormDisabled = false;\n    $scope.editTagInModal = -1;\n\n    /**\n     * Possible colors for tags\n     */\n    $scope.colors = [{rgb: 106, hex: \"#dc4437\", name: \"rentomato\"}, {rgb: 47, hex: \"#CD5C5C\", name: \"indianred\"}, {rgb: 87, hex: \"#FF4500\", name: \"orangered\"},\n        {rgb: 17, hex: \"#008B8B\", name: \"darkcyan\"}, {rgb: 18, hex: \"#B8860B\", name: \"darkgoldenrod\"}, {rgb: 68, hex: \"#32CD32\", name: \"limegreen\"},\n        {rgb: 42, hex: \"#FFD700\", name: \"gold\"}, {rgb: 77, hex: \"#bdbdbd\", name: \"gray\"}];\n    /**\n     * Available icons for tags\n     */\n    $scope.availableIcons = [\"home\", \"bed\", \"wrench\", \"share\", \"envelope\", \"reply\", \"reply-all\", \"envelope-o\", \"building\", \"building-o\", \"money\", \"check\", \"check-square-o\", \"globe\", \"dot-circle-o\", \"file\", \"book\", \"file-text\", \"exclamation\", \"tint\", \"eur\"];\n\n    // Helper function\n    function idToIndex(id) {\n        for (var x = 0; x < $scope.messages.length; x++) {\n            if ($scope.messages[x].id == id)\n                return x;\n        }\n        return -1;\n    }\n\n    /**\n     * Retrieve all the messages\n     * TODO Only perform when in the overview\n     */\n    MessageService.getMessages().then(function (response) {\n        if (response.success) {\n            $scope.messages = response.messages;\n\n            // Set the current message if one is selected\n            if ($rootScope.$state.current.name == \"messages.view\" && $stateParams && $stateParams.id) {\n                var index = idToIndex($stateParams.id);\n                $scope.message = $scope.messages[index];\n                $scope.tags.selected = $scope.messages[index].tags;\n                if ($scope.message.pivot.read == \"0\") {\n                    $scope.message.pivot.read = \"1\";\n                    $scope.messages[index].pivot.read = \"1\";\n                    MessageService.update($scope.message);\n                }\n            }\n        } else {\n            toaster.error('Something went wrong while retrieving your messages.');\n        }\n    });\n\n    /**\n     * Retrieve possible recipients\n     */\n    if ($rootScope.$state.current.name == \"messages.compose\" ||\n        $rootScope.$state.current.name == \"messages.composeTo\" ||\n        $rootScope.$state.current.name == \"messages.composing\" ||\n        $rootScope.$state.current.name == \"messages.composingType\") {\n\n        // Helper function: used to distinguish unique entries in the select2 box.\n        $scope.trackRecipientsBy = function(type, id) { return type + id; };\n\n        // Helper functions to determine who is addressed\n        $scope.isAddressed = function(type) {\n            console.log($scope.compose['recipients']);\n            if ($scope.compose['recipients']) {\n                for (var x = 0; x < $scope.compose['recipients'].length; x++) {\n                    if ($scope.compose['recipients'][x].id.split('|')[0] == type) return true;\n                }\n            }\n            return false;\n        };\n        // Helper functions: get recipient type / id\n        $scope.rType = function(id) { return id.split('|')[0]; };\n        $scope.rId = function(id) { return id.split('|')[1]; };\n\n        console.log($scope.rType);\n        var visibleUsersPromise = UserService.getVisibleUsers().then(function (response) {\n            $scope.visibleUsers = response;\n        });\n\n        var recipientsPromise = UserService.getRecipients().then(function(response) {\n            var recipients = [];\n\n            // Add recipient_type flag for each of the entries and add it to the collection\n            for (var type in response) { if (response.hasOwnProperty(type)) {\n                for (var entry in response[type]) { if (response[type].hasOwnProperty(entry)) {\n                    response[type][entry].id = type + '|' + response[type][entry].id;\n                    response[type][entry].recipient_type = type;\n                    recipients.push(response[type][entry]);\n                }}\n            }}\n\n            $scope.recipients = recipients;\n        });\n    }\n\n    /**\n     * Retrieve all the tags for the current user\n     */\n    UserService.getTags().then(function(response) { $scope.tags.all = response; });\n\n    /**\n     * Send a message\n     */\n    $scope.sendMessage = function() {\n        $scope.sendingMessage = true;\n        var data = {\n            'recipients':   $scope.compose['recipients'],\n            'subject':      $scope.compose['subject'],\n            'text':         $scope.compose['text'],\n            'priority':     $scope.compose['priority'],\n            'type':         ($scope.compose['announcement'] ? 'announcement' : 'message')\n        };\n        MessageService.sendMessage(data).then(function(response) {\n            if (response.success) {\n                $scope.messageSent = true;\n                $rootScope.$state.go(\"messages\");\n                toaster.success($filter('translate')('Your message has been sent!'));\n            } else {\n                $scope.sendingMessage = false;\n                toaster.error($filter('translate')('There was an error, please try again.'));\n            }\n        });\n    };\n\n    /**\n     * Delete a message\n     * @param id message id\n     */\n    $scope.deleteMessage = function(id) {\n        MessageService.deleteMessage(id).then(function(response) {\n            if (response.success) {\n                toaster.success('Message has been deleted');\n                $scope.messages.splice(messageIdToIndex(id), 1);\n                if ($rootScope.$state.current.name == \"messages.view\") {\n                    $rootScope.$state.go(\"messages\");\n                }\n            } else\n                toaster.error($filter('translate')('Something went wrong!'));\n        });\n    };\n\n    /**\n     * Star or unstar a message\n     * @param id message to be starred\n     */\n    $scope.toggleStar = function(index) {\n        $scope.messages[index].pivot['starred'] = ($scope.messages[index].pivot['starred'] == \"1\" ? \"0\" : \"1\");\n        MessageService.update($scope.messages[index]);\n    };\n\n    /**\n     * Everything tag related for messages\n     * - Toggle edit form\n     * - Updating tags for a message\n     * - Creation of tags on the fly\n     * - Tags management (modal)\n     */\n    // Toggle editting form\n    $scope.toggleEditTags = function() { $scope.editTags = !$scope.editTags; };\n\n    // Send the new tags for a message to backend\n    $scope.updateTags = function() {\n        MessageService.updateTags({tags: $scope.tags.selected, message: $stateParams.id}).then(function(response) {\n            if (response.success == 1) {\n                $scope.message.tags = $scope.tags.selected; $scope.editTags = false; $scope.messages[idToIndex($stateParams.id)].tags = $scope.tags.selected;\n                toaster.success($filter(\"translate\")(\"Tags have been updated\"));\n            } else {\n                toaster.error($filter(\"translate\")(\"Error while updating tags. Please try again.\"));\n            }\n        });\n    };\n\n    // Function used by ui-select to create new tag objects.\n    // ID is set to -1 by default in order to recognise in backend.\n    $scope.createTag = function (tagName) { return { id: -1, name: tagName, icon: 'tag', color: '#bdbdbd' }; };\n\n    // Function to delete a tag\n    $scope.deleteTag = function (index) {\n        var tagID = $scope.tags.all[index].id;\n        MessageService.deleteTag(tagID).then(function(response) {\n            if (response.success) {\n                $scope.tags.all.splice(index, 1);\n                toaster.success($filter('translate')('Tag has been deleted'));\n            } else {\n                toaster.error($filter('translate')('Error while deleting tag.'));\n            }\n        });\n    };\n\n\n    // Function used to display the modal\n    $scope.manageTags = function() {\n        //$('#manage-tags-modal').modal('show');\n        var modalInstance = $uibModal.open({\n            templateUrl: 'tagModalContent.html',\n            controller: 'TagModalInstanceCtrl',\n            scope:$scope\n        });\n    };\n\n    // Function to create a new tag through the modal\n    $scope.createNewTag = function(newTagForm) {\n        $scope.newTagFormDisabled = true;\n\n        // Create the tag;\n        TagService.createTag(newTagForm).then(function(response) {\n            if (response.success) {\n                toaster.success($filter('translate')('Tag created!'));\n                $scope.tags.all.push(response.tag); $scope.newTagFormDisabled = false;\n            } else {\n                if (response.reason == null) {\n                    toaster.error($filter('translate')('Error while creating your tag!'));\n                } else {\n                    if (response.reason == \"duplicate\") {\n                        toaster.warning($filter('translate')('A tag with the specified name already exists!'));\n                    }\n                }\n                $scope.newTagFormDisabled = false;\n            }\n        });\n    };\n\n    // Enable the edit form in the modal\n    $scope.setEditTagInModal = function(index) { $scope.editTagInModal = index; };\n    // Disable the edit form in the modal\n    $scope.cancelEditTagInModal = function() { $scope.editTagInModal = -1; };\n    // Save the tag in the modal\n    $scope.saveEditTagInModal = function(tag) {\n        TagService.updateTag(tag).then(function(response) {\n            if (response.success) {\n                toaster.success($filter('translate')('Tag successfully updated.'));\n            } else {\n                toaster.error($filter('translate')('Something went wrong while trying to update the tag.'));\n            }\n        });\n        $scope.editTagInModal = -1;\n    };\n\n    /**\n     * Composing: replying to other message\n     * Prefill all data that is already known.\n     */\n    // If we are replying to someone, prefill the fields.\n    if (($rootScope.$state.current.name == \"messages.composing\" || $rootScope.$state.current.name == \"messages.composingType\") && $stateParams.id) {\n        $scope.loadingDetails = true;\n        if ($stateParams.type == null) $stateParams.type = \"user\";\n\n        MessageService.getReplyDetails($stateParams.id, $stateParams.type).then(function (response) {\n            if (response.success) {\n                $scope.replyTo = response.message;\n                $scope.compose['subject'] = $scope.replyTo.subject;\n                $scope.compose['priority'] = 0;\n\n                // Make the data match the select2 dropdown format (u|ID or p|ID)\n                if ($stateParams.type == \"user\") {\n                    $scope.respondingTo = [response.user];\n                } else if ($stateParams.type == \"reply-all\") {\n                    $scope.respondingTo = response.recipients;\n                }\n\n                visibleUsersPromise.then(function(response) {\n                    $scope.compose['recipients'] = $scope.respondingTo;\n                });\n                $scope.loadingDetails = false;\n            }\n        });\n    }\n\n    /**\n     * Composing: addressed a specific person, also used for announcements\n     */\n    // If we are composing a message to a specific user\n    if (($rootScope.$state.current.name == \"messages.composeTo\") && $stateParams.type && $stateParams.id) {\n        switch ($stateParams.type) {\n            case \"user\":\n                $scope.searchId = 'u|' + $stateParams.id;\n                break;\n            case \"property\":\n                $scope.searchId = 'p|' + $stateParams.id;\n                break;\n        }\n\n        recipientsPromise.then(function(response) {\n            if ($scope.searchId) {\n                for (var x = 0; x < $scope.recipients.length; x++) {\n                    if ($scope.recipients[x].id == $scope.searchId) {\n                        $scope.compose['recipients'] = [$scope.recipients[x]];\n                        break;\n                    }\n                }\n            }\n        });\n    }\n});\n\nRentomatoApp.controller('TagModalInstanceCtrl',['$scope','$rootScope','$uibModalInstance', function ($scope,$rootScope,$uibModalInstance) { //future minify\n    // Changing the selected color.\n    $scope.changeColor = function(color) { $scope.$parent.tags.all[$scope.$parent.editTagInModal].color = color; };\n\n    // Close function for the modal.\n    $scope.close = function() { $uibModalInstance.dismiss('cancel'); };\n}]);","'use strict';\n\nRentomatoApp.controller('PaymentsController', function($rootScope, $scope, $http) {\n\n});\n","'use strict';\n\nRentomatoApp.controller('ProfileController', function($rootScope, $scope, $http) {\n\n});\n","'use strict';\n\nRentomatoApp.controller('SettingsController', [\n    '$rootScope',\n    '$scope',\n    'SettingsService',\n    'toaster',\n    '$filter',\n    'CurrencyService',\n    'UserService'\n    , function ($rootScope, $scope, SettingsService, toaster, $filter, CurrencyService, UserService) {\n        $scope.formData = {};\n        $scope.accountSettings = {};\n        $scope.deletePassword = false;\n\n        SettingsService.getAccountData().then(function (response) {\n            response.files = [\n                {\n                    id: response.files.id,\n                    file: response.files.file,\n                    file_size: response.files.file_size\n                }\n            ]\n            angular.extend($scope.formData, response);\n        });\n\n\n        $scope.setAvatar = function (avatar) {\n            SettingsService.updateAvatar(avatar).then(function (response) {\n                toaster.success($filter('translate')('Your avatar has been updated.'));\n            }, function (err) {\n                toaster.error($filter('translate')('An error occured, please try again later.'));\n            });\n        };\n\n\n        $scope.saveAvatar = function () {\n            SettingsService.updateAvatar($scope.formData, true).then(function (response) {\n                toaster.success($filter('translate')('Your avatar has been updated.'));\n            }, function (err) {\n                toaster.error($filter('translate')('An error occured, please try again later.'));\n            });\n        };\n\n\n        $scope.savePersonalInfo = function () {\n\n            SettingsService.savePersonalInfo($scope.formData, true).then(function (response) {\n                toaster.success($filter('translate')('Your personal information has been updated.'));\n            }, function (err) {\n                toaster.error($filter('translate')('An error occured, please try again later.'));\n            });\n        };\n\n\n        $scope.updatePassword = function () {\n            console.log($scope.formData);\n            SettingsService.updatePassword($scope.formData, true).then(function (response) {\n                if (response.error) {\n                    toaster.error(response.error);\n                } else {\n                    toaster.success($filter('translate')('Your password was updated.'));\n                }\n            }, function (err) {\n                toaster.error($filter('translate')('An error occured, please try again later.'));\n            });\n        };\n\n\n        $scope.updateCurrency = function () {\n            SettingsService.updateCurrency($scope.formData, true).then(function (response) {\n                UserService.getAuthUser();\n                toaster.success($filter('translate')('Your currency settings have been updated.'));\n            }, function (err) {\n                toaster.error($filter('translate')('An error occured, please try again later.'));\n            });\n        };\n\n        $scope.savePrivacy = function () {\n            console.log($scope.accountSettings);\n            SettingsService.updatePrivacy($scope.formData, true).then(function (response) {\n                toaster.success($filter('translate')('Your privacy settings have been updated.'));\n            }, function (err) {\n                toaster.error($filter('translate')('An error occured, please try again later.'));\n            });\n        };\n\n        $scope.deleteAccount = function (isValid) {\n            $scope.deletePassword = false;\n            if(isValid) {\n                SettingsService.passwordCheck($scope.formData, true).then(function (response) {\n                    if(response == 'success') {\n                        var r = confirm(\"Are you sure? This can not be reverted and you will lose all your data, including tenants, properties, documents, settings, calculations, rent components, invoices.\");\n                        if( r == true){\n                            SettingsService.deleteAccount($scope.formData, true).then(function (response) {\n                               window.location.href = \"auth/login\";\n                            });\n                        }else {\n                            return;\n                        }\n                    }else {\n                        toaster.error($filter('translate')('Current password is incorrect.'));\n                        $scope.deletePassword = true;\n                        return;\n                    }\n                });\n            }\n        }\n        $scope.removeFileFromUpload = function (file) {\n            if (file && typeof file === 'object') {\n                toaster.success($filter('translate')('Ok'));\n                SettingsService.removeFileUpload().then(function (response) {\n                    $scope.formData = response.original;\n                    console.log($scope.formData);\n                });\n            }\n        }\n\n\n    }]);\n","'use strict';\n\nRentomatoApp.controller('TenantsController', function ($rootScope, $scope, $stateParams, toaster, TenantsService, $filter, UserService, PropertyService) {\n\n    $scope.inviteRows = [];\n    $scope.properties = {};\n    $scope.initCreateTenant = function () {\n        UserService.getAuthUserPropertiesWithUnits().then(function (response) {\n            if(response){\n                for(var i=0;i<response.length;i++){\n                    var item = response[i];\n                    $scope.properties[item.id] = item;\n                }\n            }\n        });\n\n    }\n    $scope.addRow = function () {\n        $scope.inviteRows.push({\n            tenant: {\n                name: '',\n                email: '',\n            },\n            errors: null\n        });\n    };\n\n    if ($stateParams.propertyId) {\n        $scope.property = {};\n        PropertyService.getProperty($stateParams.propertyId).then(function (response) {\n            $scope.property = response.data;\n        });\n    }\n\n    // add first row\n\n    if ($stateParams.id) {\n        TenantsService.getTenant($stateParams.id).then(function (response) {\n            $scope.tenant = response.data;\n            $scope.inviteRows.push({\n                tenant: response.data,\n                errors: null\n            });\n        });\n    } else {\n        $scope.addRow();\n    }\n\n    $scope.updateTenantInfo = function () {\n        TenantsService.updateTenant($scope.tenant).then(function (response) {\n            if (response.status == 1) {\n                toaster.success($filter('translate')('Tenant information updated'));\n            }\n        });\n    };\n\n    $scope.saveTenantRow = function (data) {\n        TenantsService.createSingleTenant($scope.inviteRows[data]).then(function (response) {\n            if($scope.inviteRows[data].tenant.property_tenant) {\n                response.data.tenant.property_tenant = $scope.inviteRows[data].tenant.property_tenant;\n            }\n            $scope.inviteRows[data] = response.data;\n            if (response.errors) {\n                toaster.error($filter('translate')('An error occured!'));\n            } else {\n                toaster.success($filter('translate')('Tenant data saved'));\n            }\n        }, function (err) {\n            toaster.error($filter('translate')('An error occured, please try again later'));\n        });\n    }\n\n    $scope.searchTenants = function (searchTerm) {\n        TenantsService.searchTenants(searchTerm).then(function (response) {\n            return response.items;\n        });\n    }\n\n});\n","'use strict';\n\nRentomatoApp.controller('UserProfileController', ['$scope', 'UserService', function ($scope, UserService) {\n    $scope.userData = {};\n    if ($scope.userData) {\n        RT.blockUI({\n            target: '#userProfile',\n            animate: true\n        });\n    }\n    UserService.getAuthUserProfile().then(function (data) {\n        $scope.userData = data;\n        if(!angular.isObject(data.profile)){\n            $scope.userData.profile = {};\n        }\n    }).finally(function () {\n        RT.unblockUI(\"#userProfile\");\n    });\n\n}]);\n","'use strict';\n\nRentomatoApp.controller('DepositRelaysController', function ($rootScope, $scope, $http, $state, toaster, DepositRelayService, $cookies,UserService) {\n    if(!($scope.role.indexOf('depositrelay') > -1)) {\n        $rootScope.$state.go(\"dashboard\");\n        return;\n    }\n    DepositRelayService.getDepositRelays().then(function (response){\n        $scope.depositRelays = response.depositRelays;\n        $scope.deposit_role = response.role;\n        $scope.user = response.user;\n    });\n    $scope.onChangeEditAmount = function (id, type) {\n        console.log(id+ \"change id\");\n        console.log(\"Tesds\");\n    };\n\n    $scope.deleteEmail = function (id) {\n        console.log(\"test\");\n    };\n\n\n    $scope.onChangeClick = function(){\n        console.log($(\"#depositRelayType\").val());\n        if($(\"#depositRelayType\").val() == 'change_amount'){\n            $scope.formData = {\n                'id' :   $(\"#depositRelayID\").val(),\n                'type' : $(\"#depositRelayType\").val(),\n                'amount' : $(\"#amount\").val()\n            };\n        }else if($(\"#depositRelayType\").val() == 'change_date'){\n            $scope.formData = {\n                'id' :   $(\"#depositRelayID\").val(),\n                'type' : $(\"#depositRelayType\").val(),\n                'move_in_date' : $(\"#moved_in_date\").val()\n            };\n        }\n        DepositRelayService.changeAmountDepositRelays($scope.formData).then(function (response) {\n            $(\"#edit-modal\").modal('hide');\n            $state.go($state.current, {}, {reload: true});\n        });\n    };\n\n    $scope.onCancelClick = function(){\n        $scope.formData = {\n            'id' :   $(\"#depositRelayCancelID\").val(),\n            'cancel_reason' : $scope.cancel_reason\n        };\n        DepositRelayService.cancelDepositRelay($scope.formData).then(function (response) {\n            $(\"#cancel-modal\").modal('hide');\n            $rootScope.cancelDepositRelay = 1;\n            $state.go('dashboard', {}, {reload: 'dashboard'});\n        });\n    };\n\n    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams){\n        if(toState.name == 'dashboard' && fromState.name== 'depositRelays' && $rootScope.cancelDepositRelay == 1){\n            window.location.reload();\n        }\n    });\n})"]}